-- Description: The Management database is meticulously crafted to address the intricate needs of academic management within a university environment. 
-- It comprises tables tailored to cater to the distinct roles and responsibilities of administrators, lecturers, office staff, and students, 
-- thereby optimizing operations and fostering efficiency institution-wide. Central to the database architecture are tables dedicated to storing fundamental information about academic programs, students, courses, and enrollments. 
-- The Programs table serves as a repository for details regarding the various academic programs offered by the institution, while the Students table tracks individual student records, 
-- including their enrollment in specific programs. Complementing these foundational tables, the Courses table catalogs pertinent details about the courses available, such as their names, associated programs, assigned lecturers,
-- and classroom assignments.

-- In addition to capturing foundational academic data, the database incorporates tables designed to collect feedback and assessment information crucial for student evaluation and program enhancement.
-- The LecturerFeedback and StudentFeedback tables record feedback provided by lecturers and students, respectively, offering valuable insights into teaching effectiveness, course quality, and overall student satisfaction.
 -- These feedback mechanisms empower educators and administrators to continuously refine curriculum delivery and educational experiences. Moreover, the database facilitates the generation and storage of 
 -- reports generated by both lecturers and office staff.
 -- The Lecturerreports and Officereports tables enable the compilation of assessment reports, feedback summaries, and administrative documentation. By centralizing report generation and storage, 
 -- the database streamlines administrative processes, enhances transparency, and fosters data-driven decision-making across various management functions.

-- Furthermore, the database promotes seamless interaction and collaboration among stakeholders through its robust data structures and efficient information retrieval mechanisms.
-- Administrators can leverage the comprehensive student and course data to facilitate strategic planning, resource allocation, and academic program development.
-- Lecturers benefit from streamlined access to student feedback and performance data, enabling them to tailor instructional strategies and provide personalized support to students.
-- Office staff members can efficiently manage administrative tasks, student records, and reporting requirements, facilitating smooth operation of administrative functions within the institution. 
-- Students benefit from enhanced services, streamlined communication channels, and personalized support, contributing to an enriching academic experience.
-- Overall, the Management database serves as a dynamic platform for academic management, empowering stakeholders to drive continuous improvement, foster innovation,
-- and enhance the quality of education delivered within the institution.

-- Create the database
CREATE DATABASE Management;

-- Use the database
USE Management;


-- Table: ADMINS
-- Description: Stores information about administrators.
-- Columns:
--   admin_id: Unique identifier for each administrator, auto-incremented.
--   username: Username of the administrator.
--   password: Password of the administrator.
--   role: Role of the administrator (e.g., "admin").
CREATE TABLE ADMINS (
    admin_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50),
    password VARCHAR(50),
    role VARCHAR(50)
);


-- Table: LECTURER
-- Description: Stores information about lecturers.
-- Columns:
--   Lecturer_id: Unique identifier for each lecturer, auto-incremented.
--   username: Username of the lecturer.
--   password: Password of the lecturer.
--   role: Role of the lecturer (e.g., "lecturer").
CREATE TABLE LECTURER (
    Lecturer_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50),
    password VARCHAR(50),
    role VARCHAR(50)
);


-- Table: OFFICE
-- Description: Stores information about office staff.
-- Columns:
--   Office_id: Unique identifier for each office staff member, auto-incremented.
--   username: Username of the office staff member.
--   password: Password of the office staff member.
--   role: Role of the office staff member (e.g., "office").
CREATE TABLE OFFICE (
    Office_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50),
    password VARCHAR(50),
    role VARCHAR(50)
);


CREATE TABLE Programmes (
  ProgrammeID INT AUTO_INCREMENT PRIMARY KEY,
  ProgrammeName VARCHAR(255) NOT NULL
);

CREATE TABLE Students (
  StudentID INT AUTO_INCREMENT PRIMARY KEY,
  StudentName VARCHAR(255) NOT NULL,
  ProgrammeID INT NOT NULL,
  FOREIGN KEY (ProgrammeID) REFERENCES Programmes(ProgrammeID)
);

CREATE TABLE Courses (
  CourseID INT AUTO_INCREMENT PRIMARY KEY,
  CourseName VARCHAR(255) NOT NULL,
  ProgrammeID INT NOT NULL,
  LecturerID INT NOT NULL,
  Room VARCHAR(50) NOT NULL,
  FOREIGN KEY (ProgrammeID) REFERENCES Programmes(ProgrammeID),
  FOREIGN KEY (LecturerID) REFERENCES Lecturer(Lecturer_id)  -- Corrected reference to LECTURER table
);

CREATE TABLE Enrollments (
  EnrollmentID INT AUTO_INCREMENT PRIMARY KEY,
  StudentID INT,
  CourseID INT,
  FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
  FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

CREATE TABLE Grades (
  GradeID INT AUTO_INCREMENT PRIMARY KEY,
  EnrollmentID INT,
  StudentID INT,
  Grade DECIMAL(4, 2),
  FOREIGN KEY (EnrollmentID) REFERENCES Enrollments(EnrollmentID),
  FOREIGN KEY (StudentID) REFERENCES Students(StudentID)
);

CREATE TABLE LecturerFeedback (
  LecturerFeedbackID INT AUTO_INCREMENT PRIMARY KEY,
  LecturerID INT,
  CourseID INT,
  StudentID INT,
  LecturerFeedbackText TEXT
  
);

CREATE TABLE StudentFeedback (
  StudentFeedbackID INT AUTO_INCREMENT PRIMARY KEY,
  StudentID INT,
  CourseID INT,
  FeedbackText TEXT
  
);


CREATE TABLE Officereports (
    OfficereportID INT AUTO_INCREMENT PRIMARY KEY,
    OfficeID INT,
    StudentID INT,
    CourseID INT,
    StudentFeedbackText TEXT,
    Room VARCHAR(50)
);
 
CREATE TABLE Lecturerreports (
    LecturerreportsID INT AUTO_INCREMENT PRIMARY KEY,
    LecturerID INT,
    CourseID INT,
    StudentID INT,
    StudentName VARCHAR(255),
    EnrollmentID INT,
    Grade DECIMAL(4, 2),
    LecturerFeedbackText TEXT,
    Room VARCHAR(50)
);






-- Inserting an administrator account into the ADMINS table.
-- Description: This SQL command inserts a new administrator account into the ADMINS table of the Management database.
-- The username 'Admin' and password 'Java' are provided, along with the role 'Admin' indicating administrative privileges.

INSERT INTO ADMINS (username, password, role)
VALUES
('Admin', 'Java', 'Admin');


-- Inserting a lecturer account into the LECTURER table.
-- Description: This SQL command inserts a new lecturer account into the LECTURER table of the Management database.
-- The username, password, and role of the lecturer are specified in the VALUES clause.
INSERT INTO LECTURER (username, password, role)
VALUES 
('JohnSmith', 'password1', 'Lecturer'),
('SarahJohnson', 'password2', 'Lecturer'),
('MichaelWilliams', 'password3', 'Lecturer'),
('EmilyJones', 'password4', 'Lecturer'),
('DanielBrown', 'password5', 'Lecturer'),
('JessicaDavis', 'password6', 'Lecturer'),
('MatthewMiller', 'password7', 'Lecturer'),
('AshleyWilson', 'password8', 'Lecturer'),
('ChristopherMoore', 'password9', 'Lecturer'),
('AmandaTaylor', 'password10', 'Lecturer'),
('DavidAnderson', 'password11', 'Lecturer'),
('SamanthaThomas', 'password12', 'Lecturer'),
('JamesJackson', 'password13', 'Lecturer'),
('ElizabethWhite', 'password14', 'Lecturer'),
('JoshuaHarris', 'password15', 'Lecturer'),
('LaurenMartin', 'password16', 'Lecturer'),
('AndrewThompson', 'password17', 'Lecturer'),
('RachelGarcia', 'password18', 'Lecturer'),
('NicholasMartinez', 'password19', 'Lecturer'),
('MeganRobinson', 'password20', 'Lecturer'),
('RyanClark', 'password21', 'Lecturer'),
('KimberlyLewis', 'password22', 'Lecturer'),
('BrandonLee', 'password23', 'Lecturer'),
('StephanieHall', 'password24', 'Lecturer'),
('JustinYoung', 'password25', 'Lecturer'),
('BrittanyAllen', 'password26', 'Lecturer'),
('KevinKing', 'password27', 'Lecturer'),
('TaylorScott', 'password28', 'Lecturer'),
('BenjaminGreen', 'password29', 'Lecturer'),
('HaleyCarter', 'password30', 'Lecturer'),
('AlexanderHill', 'password31', 'Lecturer'),
('OliviaAdams', 'password32', 'Lecturer'),
('JonathanTurner', 'password33', 'Lecturer'),
('KaylaWright', 'password34', 'Lecturer'),
('ZacharyPhillips', 'password35', 'Lecturer'),
('VictoriaTorres', 'password36', 'Lecturer'),
('PatrickNguyen', 'password37', 'Lecturer'),
('NataliePerez', 'password38', 'Lecturer'),
('JacobReyes', 'password39', 'Lecturer'),
('NicoleEvans', 'password40', 'Lecturer'),
('SamuelStewart', 'password41', 'Lecturer'),
('DanielleMurphy', 'password42', 'Lecturer'),
('TylerRivera', 'password43', 'Lecturer'),
('EricaCook', 'password44', 'Lecturer'),
('WilliamBailey', 'password45', 'Lecturer'),
('ShannonReed', 'password46', 'Lecturer'),
('BrianWard', 'password47', 'Lecturer'),
('MorganBell', 'password48', 'Lecturer'),
('TimothySanchez', 'password49', 'Lecturer'),
('LisaPrice', 'password50', 'Lecturer');

-- Inserting office staff accounts into the OFFICE table.
-- Description: This SQL command inserts a new office staff account into the OFFICE table of the Management database.
-- The username, password, and role of the office staff member are provided in the VALUES clause.
INSERT INTO OFFICE (username, password, role)
VALUES
('AliceJohnson', 'password1', 'Office'),
('PeterSmith', 'password2', 'Office'),
('RachelWong', 'password3', 'Office'),
('MichaelBrown', 'password4', 'Office'),
('JenniferDavis', 'password5', 'Office'),
('AlexMiller', 'password6', 'Office'),
('EmilyWilson', 'password7', 'Office'),
('ChristopherLee', 'password8', 'Office'),
('SarahGarcia', 'password9', 'Office'),
('DavidTaylor', 'password10', 'Office'),
('JessicaMartinez', 'password11', 'Office'),
('DanielThompson', 'password12', 'Office'),
('LaurenHernandez', 'password13', 'Office'),
('MatthewClark', 'password14', 'Office'),
('AshleyLopez', 'password15', 'Office'),
('AndrewHill', 'password16', 'Office'),
('AmandaYoung', 'password17', 'Office'),
('JamesPerez', 'password18', 'Office'),
('OliviaLewis', 'password19', 'Office'),
('JoshuaNguyen', 'password20', 'Office'),
('SamanthaKing', 'password21', 'Office'),
('RyanScott', 'password22', 'Office'),
('ElizabethGreen', 'password23', 'Office'),
('NicholasHall', 'password24', 'Office'),
('TaylorAdams', 'password25', 'Office'),
('BenjaminThomas', 'password26', 'Office'),
('MeganWhite', 'password27', 'Office'),
('KevinRodriguez', 'password28', 'Office'),
('KimberlyMartinez', 'password29', 'Office'),
('BrandonLopez', 'password30', 'Office'),
('StephanieCook', 'password31', 'Office'),
('JonathanRivera', 'password32', 'Office'),
('KaylaMitchell', 'password33', 'Office'),
('ZacharyCarter', 'password34', 'Office'),
('VictoriaRoberts', 'password35', 'Office'),
('PatrickRamirez', 'password36', 'Office'),
('NatalieRussell', 'password37', 'Office'),
('JacobHughes', 'password38', 'Office'),
('NicoleSanders', 'password39', 'Office'),
('SamuelMorales', 'password40', 'Office');



-- Inserting 50 academic programs into the Programmes table.
-- Description: This SQL command inserts 50 new academic programs into the Programmes table of the Management database.
-- Each program is identified by its name, which is provided in the VALUES clause.
INSERT INTO Programmes (ProgrammeName) VALUES
('Computer Science'),
('Mechanical Engineering'),
('Electrical Engineering'),
('Civil Engineering'),
('Chemical Engineering'),
('Physics'),
('Mathematics'),
('Biology'),
('Chemistry'),
('Psychology'),
('Economics'),
('Business Administration'),
('English Literature'),
('History'),
('Sociology'),
('Political Science'),
('Art History'),
('Music'),
('Film Studies'),
('Environmental Science'),
('Geology'),
('Philosophy'),
('Anthropology'),
('Architecture'),
('Nursing'),
('Medicine'),
('Dentistry'),
('Veterinary Science'),
('Law'),
('Education'),
('Linguistics'),
('Communication'),
('Information Technology'),
('Graphic Design'),
('Fashion Design'),
('Culinary Arts'),
('Hospitality Management'),
('Agriculture'),
('Forestry'),
('Urban Planning'),
('Public Health'),
('International Relations'),
('Finance'),
('Marketing'),
('Human Resources'),
('Nutrition'),
('Physics'),
('Statistics');


-- Inserting course information into the Courses table.
-- Description: This SQL command inserts course details into the Courses table of the Management database.
-- Each course is associated with a specific academic program and lecturer, identified by their respective IDs.
-- The room assignment for each course is also specified.
INSERT INTO Courses (CourseName, ProgrammeID, LecturerID, Room) VALUES
('Introduction to Programming', 1, 1, 'Room 101'),
('Data Structures and Algorithms', 1, 2, 'Room 102'),
('Database Management Systems', 1, 3, 'Room 103'),
('Computer Networks', 1, 4, 'Room 104'),
('Software Engineering', 1, 5, 'Room 105'),
('Introduction to Mechanical Engineering', 2, 6, 'Room 201'),
('Thermodynamics', 2, 7, 'Room 202'),
('Fluid Mechanics', 2, 8, 'Room 203'),
('Introduction to Electrical Engineering', 3, 9, 'Room 204'),
('Circuit Theory', 3, 10, 'Room 205'),
('Digital Electronics', 3, 11, 'Room 206'),
('Power Systems', 3, 12, 'Room 207'),
('Control Systems', 3, 13, 'Room 208'),
('Introduction to Civil Engineering', 4, 14, 'Room 209'),
('Structural Analysis', 4, 15, 'Room 210'),
('Geotechnical Engineering', 4, 16, 'Room 211'),
('Transportation Engineering', 4, 17, 'Room 212'),
('Environmental Engineering', 4, 18, 'Room 213'),
('Introduction to Chemical Engineering', 5, 19, 'Room 214'),
('Chemical Reaction Engineering', 5, 20, 'Room 215'),
('Process Control', 5, 21, 'Room 216'),
('Heat Transfer', 5, 22, 'Room 217'),
('Mass Transfer', 5, 23, 'Room 218'),
('Introduction to Physics', 6, 24, 'Room 219'),
('Classical Mechanics', 6, 25, 'Room 220'),
('Quantum Mechanics', 6, 26, 'Room 221'),
('Thermal Physics', 6, 27, 'Room 222'),
('Electromagnetism', 6, 28, 'Room 223'),
('Introduction to Mathematics', 7, 29, 'Room 224'),
('Calculus', 7, 30, 'Room 225'),
('Linear Algebra', 7, 31, 'Room 226'),
('Probability Theory', 7, 32, 'Room 227'),
('Discrete Mathematics', 7, 33, 'Room 228'),
('Introduction to Biology', 8, 34, 'Room 229'),
('Cell Biology', 8, 35, 'Room 230'),
('Genetics', 8, 36, 'Room 231'),
('Ecology', 8, 37, 'Room 232'),
('Evolutionary Biology', 8, 38, 'Room 233'),
('Introduction to Chemistry', 9, 39, 'Room 234'),
('Organic Chemistry', 9, 40, 'Room 235'),
('Inorganic Chemistry', 9, 41, 'Room 236'),
('Physical Chemistry', 9, 42, 'Room 237'),
('Analytical Chemistry', 9, 43, 'Room 238'),
('Introduction to Psychology', 10, 44, 'Room 239'),
('Developmental Psychology', 10, 45, 'Room 240');


-- Inserting student information into the Students table.
-- Description: This SQL command inserts student records into the Students table of the Management database.
-- Each student is associated with a specific academic program, identified by its ProgrammeID.
INSERT INTO Students (StudentName, ProgrammeID) VALUES
('Alice Smith', 1),
('Bob Johnson', 1),
('Charlie Brown', 2),
('Diana Wilson', 2),
('Emma Davis', 3),
('Frank Martinez', 3),
('Grace Taylor', 4),
('Henry Anderson', 4),
('Isabella Thomas', 5),
('Jack Garcia', 5),
('Katherine Martinez', 6),
('Liam Robinson', 6),
('Mia Clark', 7),
('Noah Lee', 7),
('Olivia Hernandez', 8),
('Patrick Lewis', 8),
('Quinn Walker', 9),
('Ryan Hall', 9),
('Sophia Perez', 10),
('Thomas Moore', 10),
('Uma King', 11),
('Victor Green', 11),
('Willow Adams', 12),
('Xavier Mitchell', 12),
('Yara Hill', 13),
('Zachary Turner', 13),
('Abigail Carter', 14),
('Benjamin Baker', 14),
('Charlotte White', 15),
('Daniel Young', 15),
('Ella Rodriguez', 16),
('Finn Foster', 16),
('Gabriella Sanchez', 17),
('Henry Nguyen', 17),
('Isaac Rivera', 18),
('Jasmine Cox', 18),
('Kai Stewart', 19),
('Lily Brooks', 19),
('Matthew Ramirez', 20),
('Natalie Reed', 20),
('Oliver Scott', 21),
('Penelope Ward', 21),
('Quincy Martinez', 22),
('Riley Brown', 22),
('Sophie Evans', 23),
('Theodore Perez', 23),
('Uma Roberts', 24),
('Vincent Baker', 24),
('Willa Torres', 25),
('Xavier Wright', 25);

-- Description: These SQL commands are intended to populate the Grades and Enrollments tables in the Management database with sample data.
-- The first command inserts random grades for enrolled students into the Grades table. Each student's grade is generated using a random number between 0 and 100, rounded to two decimal places.

INSERT INTO Grades (EnrollmentID, Grade)
-- Select EnrollmentID and generate random grades for enrolled students
SELECT EnrollmentID, ROUND(RAND() * 100, 2) AS Grade
-- Retrieve EnrollmentID from the Enrollments table
FROM Enrollments
-- Filter students who are enrolled in multiple courses
WHERE StudentID IN (
SELECT StudentID
FROM Enrollments
GROUP BY StudentID
HAVING COUNT(*) > 1
);

-- Description: This SQL command inserts enrollments for students into the Enrollments table, limiting each student to a maximum of three courses.
-- The command ensures that each student is enrolled in up to three courses by performing a cross join between the Students and Courses tables, and then filtering based on the maximum enrollment limit.

-- Inserting enrollments for students, limiting each student to a maximum of three courses
INSERT INTO Enrollments (StudentID, CourseID)
-- Select StudentID and CourseID combinations for enrollment
SELECT S.StudentID, C.CourseID
-- Perform a cross join between Students and Courses tables
FROM Students S
CROSS JOIN Courses C
-- Ensure that each student is enrolled in up to three courses
WHERE (
SELECT COUNT(*)
FROM Enrollments E
WHERE E.StudentID = S.StudentID
) < 3;


-- Description: These SQL commands are intended to populate the Grades table with random grades for students who are enrolled in multiple courses, and to generate feedback entries for each student, course, and lecturer combination in the Management database.

-- Inserting grades for students who are enrolled in multiple courses, ensuring each grade corresponds to a valid enrollment
INSERT INTO Grades (EnrollmentID, Grade)
-- Select EnrollmentID and generate random grades for enrolled students
SELECT E.EnrollmentID, ROUND(RAND() * 100, 2) AS Grade
-- Subquery to assign row numbers to enrollments within each student group
FROM (
    SELECT E.*, ROW_NUMBER() OVER (PARTITION BY E.StudentID ORDER BY E.EnrollmentID) AS EnrollRank
    FROM Enrollments E
) AS E
-- Join with a subquery to filter students with multiple enrollments
INNER JOIN (
    SELECT StudentID
    FROM Enrollments
    GROUP BY StudentID
    HAVING COUNT(*) > 1
) AS MultipleEnrollments ON E.StudentID = MultipleEnrollments.StudentID
-- Filter enrollments to limit to the first three for each student
WHERE E.EnrollRank <= 3;

-- Description: This SQL command inserts feedback entries for each student, course, and lecturer combination into the LecturerFeedback table.
-- It provides a foundation for capturing feedback from lecturers about student performance and course experiences.

-- Generate feedback entries for each student, course, and lecturer combination
INSERT INTO LecturerFeedback (LecturerID, CourseID, StudentID, LecturerFeedbackText)
VALUES 
    (1, 1, 1, 'Great lecturer, very helpful'),
    (2, 2, 2, 'Enjoyed the course content'),
    (3, 3, 3, 'Well-organized lectures and materials'),
    (4, 4, 4, 'The instructor was knowledgeable and engaging'),
    (5, 5, 5, 'The course material was presented clearly'),
    (6, 6, 6, 'Excellent support from the teaching staff'),
    (7, 7, 7, 'Interactive classes made learning enjoyable'),
    (8, 8, 8, 'The course exceeded my expectations'),
    (9, 9, 9, 'The lecturer was responsive to questions'),
    (10, 10, 10, 'Practical examples helped understanding'),
    (11, 11, 11, 'The course structure was well-designed'),
    (12, 12, 12, 'Interesting assignments challenged me'),
    (13, 13, 13, 'The course covered relevant topics'),
    (14, 14, 14, 'The lecturer provided valuable insights'),
    (15, 15, 15, 'I would recommend this course to others'),
    (16, 16, 16, 'Engaging discussions in class'),
    (17, 17, 17, 'The course materials were comprehensive'),
    (18, 18, 18, 'Clear explanations made concepts easy to grasp'),
    (19, 19, 19, 'The course was well-paced'),
    (20, 20, 20, 'The instructor was approachable and supportive'),
    (21, 21, 21, 'Enjoyed collaborating with classmates'),
    (22, 22, 22, 'Interactive learning activities were helpful'),
    (23, 23, 23, 'The course provided valuable practical skills'),
    (24, 24, 24, 'The instructor provided timely feedback'),
    (25, 25, 25, 'The course improved my understanding of the subject'),
    (26, 26, 26, 'The course materials were well-organized'),
    (27, 27, 27, 'The instructor was enthusiastic and passionate'),
    (28, 28, 28, 'The course challenged me to think critically'),
    (29, 29, 29, 'The instructor created a supportive learning environment'),
    (30, 30, 30, 'The course content was relevant to real-world applications'),
    (31, 31, 31, 'Enjoyed the hands-on learning experiences'),
    (32, 32, 32, 'The course provided valuable industry insights'),
    (33, 33, 33, 'The instructor was knowledgeable and approachable'),
    (34, 34, 34, 'The course helped me develop new skills'),
    (35, 35, 35, 'The instructor encouraged participation and discussion'),
    (36, 36, 36, 'The course assignments were engaging and challenging'),
    (37, 37, 37, 'The course content was up-to-date and relevant'),
    (38, 38, 38, 'The instructor provided helpful resources'),
    (39, 39, 39, 'The course improved my problem-solving abilities'),
    (40, 40, 40, 'The instructor was effective at explaining complex concepts'),
    (41, 41, 41, 'The course was well-structured and organized'),
    (42, 42, 42, 'The instructor was responsive to student needs'),
    (43, 43, 43, 'The course provided opportunities for practical application'),
    (44, 44, 44, 'The instructor was supportive and encouraging'),
    (45, 45, 45, 'The course content was engaging and informative'),
    (46, 46, 46, 'The instructor provided clear instructions'),
    (47, 47, 47, 'The course enhanced my understanding of the subject matter'),
    (48, 48, 48, 'The instructor provided helpful feedback on assignments'),
    (49, 49, 49, 'The course challenged me to think creatively'),
    (50, 50, 50, 'The instructor fostered a collaborative learning environment');


-- Description: This SQL command inserts feedback entries provided by students for each course they are enrolled in into the StudentFeedback table. 
-- It facilitates the collection of feedback from students regarding their learning experiences, course content, and instructor performance.

-- Inserting feedback entries provided by students for each course they are enrolled in
INSERT INTO StudentFeedback (StudentID, CourseID, FeedbackText)
VALUES 
    (1, 1, 'Great lecturer, very helpful'),
    (2, 2, 'Enjoyed the course content'),
    (3, 3, 'Well-organized lectures and materials'),
    (4, 4, 'The instructor was knowledgeable and engaging'),
    (5, 5, 'The course material was presented clearly'),
    (6, 6, 'Excellent support from the teaching staff'),
    (7, 7, 'Interactive classes made learning enjoyable'),
    (8, 8, 'The course exceeded my expectations'),
    (9, 9, 'The lecturer was responsive to questions'),
    (10, 10, 'Practical examples helped understanding'),
    (11, 11, 'The course structure was well-designed'),
    (12, 12, 'Interesting assignments challenged me'),
    (13, 13, 'The course covered relevant topics'),
    (14, 14, 'The lecturer provided valuable insights'),
    (15, 15, 'I would recommend this course to others'),
    (16, 16, 'Engaging discussions in class'),
    (17, 17, 'The course materials were comprehensive'),
    (18, 18, 'Clear explanations made concepts easy to grasp'),
    (19, 19, 'The course was well-paced'),
    (20, 20, 'The instructor was approachable and supportive'),
    (21, 21, 'Enjoyed collaborating with classmates'),
    (22, 22, 'Interactive learning activities were helpful'),
    (23, 23, 'The course provided valuable practical skills'),
    (24, 24, 'The instructor provided timely feedback'),
    (25, 25, 'The course improved my understanding of the subject'),
    (26, 26, 'The course materials were well-organized'),
    (27, 27, 'The instructor was enthusiastic and passionate'),
    (28, 28, 'The course challenged me to think critically'),
    (29, 29, 'The instructor created a supportive learning environment'),
    (30, 30, 'The course content was relevant to real-world applications'),
    (31, 31, 'Enjoyed the hands-on learning experiences'),
    (32, 32, 'The course provided valuable industry insights'),
    (33, 33, 'The instructor was knowledgeable and approachable'),
    (34, 34, 'The course helped me develop new skills'),
    (35, 35, 'The instructor encouraged participation and discussion'),
    (36, 36, 'The course assignments were engaging and challenging'),
    (37, 37, 'The course content was up-to-date and relevant'),
    (38, 38, 'The instructor provided helpful resources'),
    (39, 39, 'The course improved my problem-solving abilities'),
    (40, 40, 'The instructor was effective at explaining complex concepts'),
    (41, 41, 'The course was well-structured and organized'),
    (42, 42, 'The instructor was responsive to student needs'),
    (43, 43, 'The course provided opportunities for practical application'),
    (44, 44, 'The instructor was supportive and encouraging'),
    (45, 45, 'The course content was engaging and informative'),
    (46, 46, 'The instructor provided clear instructions'),
    (47, 47, 'The course enhanced my understanding of the subject matter'),
    (48, 48, 'The instructor provided helpful feedback on assignments'),
    (49, 49, 'The course challenged me to think creatively'),
    (50, 50, 'The instructor fostered a collaborative learning environment');


-- Description: This SQL command populates the Officereports table with data extracted from various tables, including Students, Enrollments, StudentFeedback, Courses, and Lecturer. 
-- It selects information such as the OfficeID (which is repurposed as the lecturer ID), student ID, course ID, student feedback text, and room, joining tables to ensure data integrity and accuracy.

-- Populating the Officereports table with relevant data
INSERT INTO Officereports (OfficeID, StudentID, CourseID, StudentFeedbackText, Room)
SELECT 
    L.Lecturer_id AS OfficeID,  -- Assigning the lecturer ID as the OfficeID
    S.StudentID,  -- Selecting the student ID from the Students table
    E.CourseID,  -- Selecting the course ID from the Enrollments table
    SF.FeedbackText AS StudentFeedbackText,  -- Selecting the student feedback text from the StudentFeedback table
    C.Room  -- Selecting the room from the Courses table
FROM 
    Students S  -- Alias for the Students table
    JOIN Enrollments E ON S.StudentID = E.StudentID  -- Joining Students and Enrollments tables on student ID
    JOIN StudentFeedback SF ON S.StudentID = SF.StudentID AND E.CourseID = SF.CourseID  -- Joining StudentFeedback table to retrieve student feedback
    JOIN Courses C ON E.CourseID = C.CourseID  -- Joining Courses table to obtain room information
    JOIN Lecturer L ON C.LecturerID = L.Lecturer_id;  -- Joining Lecturer table to access the lecturer ID

-- Description: This SQL command inserts data into the Lecturerreports table by combining information from Enrollments, Courses, Lecturer, Students, Grades, and LecturerFeedback tables. 
-- It gathers data such as the lecturer ID, course ID, student ID, enrollment ID, grade, lecturer feedback text, and room, ensuring that the appropriate relationships between tables are maintained.

-- Populating the Lecturerreports table with relevant data
INSERT INTO Lecturerreports (LecturerID, CourseID, StudentID, EnrollmentID, Grade, LecturerFeedbackText, Room)
SELECT 
    L.Lecturer_id AS LecturerID,  -- Assigning the lecturer ID as the LecturerID
    C.CourseID,  -- Selecting the course ID from the Courses table
    S.StudentID,  -- Selecting the student ID from the Students table
    E.EnrollmentID,  -- Selecting the enrollment ID from the Enrollments table
    G.Grade,  -- Selecting the grade from the Grades table
    LF.LecturerFeedbackText,  -- Selecting the lecturer feedback text from the LecturerFeedback table
    C.Room  -- Selecting the room from the Courses table
FROM 
    Enrollments E  -- Alias for the Enrollments table
    JOIN Courses C ON E.CourseID = C.CourseID  -- Joining Enrollments and Courses tables on course ID
    JOIN Lecturer L ON C.LecturerID = L.Lecturer_id  -- Joining Courses and Lecturer tables on lecturer ID
    JOIN Students S ON E.StudentID = S.StudentID  -- Joining Enrollments and Students tables on student ID
    JOIN Grades G ON E.EnrollmentID = G.EnrollmentID  -- Joining Enrollments and Grades tables on enrollment ID
    JOIN LecturerFeedback LF ON C.CourseID = LF.CourseID;  -- Joining Courses and LecturerFeedback tables on course ID
